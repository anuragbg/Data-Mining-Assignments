install.packages("ddalpha")
install.packages("caret")
install.packages("naiveBayes")
install.packages("naivebayes")
library(naivebayes)
library(naiveBayes)
library(naivebayes)
model <- naiveBayes(Species ~., data = training)
install.packages("naivebayes",dependencies = TRUE)
install.packages("naivebayes", dependencies = TRUE)
model <- naiveBayes(Species ~., data = training)
install.packages("e1071")
model <- naiveBayes(Species ~., data = training)
install.packages("e1071",dependencies = TRUE)
model <- naiveBayes(Species ~., data = training)
model <- naiveBayes(Species ~., data = training)
library(rpart)
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
library(rpart)
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
library(rpart)
library(corrplot)
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
install.packages("mlbench")
?fit
??fit
?train
??train
library(caret)
setwd("~/Codes/Data-Mining-Assignments")
library(dplyr)
install.packages(c("BH", "dendextend", "devtools", "knitr", "lubridate", "nlme", "RcppEigen", "rlang", "seriation", "stringi", "stringr", "timeDate", "tseries", "XML"))
?plot
iris
?ggplot
?hclust
set.seed(1234)
x <- mvrnorm(1.5e5, mu=rep(0,5), Sigma=diag(1,5))
x <- rbind(x, mvrnorm(1e5, mu=rep(10,5),
Sigma=diag(0.1,5)+0.9))
library(MASS) ## for mvrnorm
library(birch)
set.seed(1234)
x <- mvrnorm(1.5e5, mu=rep(0,5), Sigma=diag(1,5))
x <- rbind(x, mvrnorm(1e5, mu=rep(10,5),
Sigma=diag(0.1,5)+0.9))
birchObj <- birch(x, 5)
birchObj
data(birchObj)
kOut <- kmeans.birch(birchObj, 2, nstart=10)
kOut <- kmeans.birch(birchObj, matrix(c(0,10), ncol=5, nrow=2))
plot(birchObj, col=kOut$clust$sub)
library(knitr)
library(ggplot2)
kable(iris[1:5,1:5], caption = "Iris dataset for clustering")
# Euclidean Distance
str(dist(iris[, 3:4], method = "euclidean", upper = TRUE, diag = TRUE))
# Euclidean Distance
str(dist(iris[, 3:4], method = "euclidean", upper = TRUE, diag = TRUE))
# Euclidean Distance
euclid_dist <- dist(iris[, 3:4], method = "euclidean", upper = TRUE, diag = TRUE)
str(euclid_dist[,1:10])
# Euclidean Distance
euclid_dist <- dist(iris[, 3:4], method = "euclidean", upper = TRUE, diag = TRUE)
euclid_dist[1:10,1:10]
# Euclidean Distance
euclid_dist <- dist(iris[, 3:4], method = "euclidean", upper = TRUE, diag = TRUE)
euclid_dist[1:10,1:10]
# Euclidean Distance
euclid_dist <- dist(iris[, 3:4], method = "euclidean", upper = TRUE, diag = TRUE)
euclid_dist[1,1]
# Euclidean Distance
euclid_dist <- dist(iris[, 3:4], method = "euclidean", upper = TRUE, diag = TRUE)
euclid_dist[1,1]
# Euclidean Distance
euclid_dist <- dist(iris[, 3:4], method = "euclidean", upper = TRUE, diag = TRUE)
euclid_dist[1,]
# Euclidean Distance
euclid_dist <- as.matrix(dist(iris[, 3:4],
method = "euclidean",
upper = TRUE,
diag = TRUE))
euclid_dist[1:10,1:7]
# Manhattan Distance
man_dist <- as.matrix(dist(iris[, 3:4],
method = "manhattan",
upper = TRUE,
diag = TRUE))
man_dist[1:10,1:7]
# Euclidean Distance
euclid_dist <- as.matrix(dist(iris[, 3:4],
method = "euclidean",
upper = TRUE,
diag = TRUE))
euclid_dist[1:10,1:7]
# Manhattan Distance
man_dist <- as.matrix(dist(iris[, 3:4],
method = "manhattan",
upper = TRUE,
diag = TRUE))
man_dist[1:10,1:10]
?philentropy::distance
library(philentropy)
install.packages('philentropy',dependencies=TRUE)
?philentropy::distance
library(philentropy::distance)
library(philentropy)
cos_dist <- as.matrix(distance(iris[,3:4],
method = "cosine"))
cos_dist
iris
?datasets
datasets
library(MASS)
data
data()
data()
?wine
??wine
dataset(wine)
datasets::airquality
library(philentropy)
# Cosine distance
cos_dist <- as.matrix(distance(iris[,3:4],
method = "cosine"))
cos_dist[1:6,1:7]
# Jaccard similarity
jac_sim <- as.matrix(distance(iris[,3:4],
method = "jaccard"))
jac_sim
library(philentropy)
# Cosine distance
cos_dist <- as.matrix(distance(iris[,3:4],
method = "cosine"))
cos_dist[1:6,1:7]
# Jaccard similarity
jac_sim <- as.matrix(distance(iris[,3:4],
method = "jaccard"))
jac_sim[1:6,1:7]
iris
str(iris)
iris[,5]
#Edit Distance
edit_dist <- as.matrix(adist(iris[,5])) #y = NULL (default) indicating taking x as y
edit_dist[30:40,1:10]
#Edit Distance
edit_dist <- as.matrix(adist(iris[,5])) #y = NULL (default) indicating taking x as y
edit_dist[48:60,1:20]
#Edit Distance
edit_dist <- as.matrix(adist(iris[,5])) #y = NULL (default) indicating taking x as y
edit_dist[48:60,1:14]
library(birch)
?birch
library(devtools)
install_github("vqv/ggbiplot")
install.packages("textreuse",dependencies="TRUE")
install.packages('textreuse',dependencies=TRUE")
''
install.packages('textreuse',dependencies=TRUE")
install.packages('textreuse',dependencies='TRUE')
install.packages('textreuse',dependencies=TRUE)
?minhash
?minhashes
??minhashes
library(textreuse)
minhash <- minhash_generator(n = 240, seed = 3552)
head(minhash)
head(minhash(c("turn tokens into", "tokens into hashes", "into hashes fast")))
dir <- system.file("extdata/ats", package = "textreuse")
corpus <- TextReuseCorpus(dir = dir, tokenizer = tokenize_ngrams, n = 5,
minhash_func = minhash, keep_tokens = TRUE,
progress = FALSE)
# verify minhash exists in the corpus
as.matrix(minhashes(corpus)) # minhash singature of the document
length(minhashes(corpus[[1]]))
